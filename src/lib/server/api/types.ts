// Code generated by tygo. DO NOT EDIT.
// Generated types for Commercify API
// Do not edit this file directly

//////////
// source: category.go

/**
 * CategoryDTO represents a category in the system
 */
export interface CategoryDTO {
	id: number /* uint */;
	name: string;
	description: string;
	parent_id?: number /* uint */;
	created_at: string;
	updated_at: string;
}
/**
 * CreateCategoryRequest represents the data needed to create a new category
 */
export interface CreateCategoryRequest {
	name: string;
	description: string;
	parent_id?: number /* uint */;
}
/**
 * UpdateCategoryRequest represents the data needed to update an existing category
 */
export interface UpdateCategoryRequest {
	name?: string;
	description?: string;
	parent_id?: number /* uint */;
}

//////////
// source: checkout.go

/**
 * CheckoutDTO represents a checkout session in the system
 */
export interface CheckoutDTO {
	id: number /* uint */;
	user_id?: number /* uint */;
	session_id?: string;
	items: CheckoutItemDTO[];
	status: string;
	shipping_address: AddressDTO;
	billing_address: AddressDTO;
	shipping_method_id?: number /* uint */;
	shipping_option?: ShippingOptionDTO;
	payment_provider?: string;
	total_amount: number /* float64 */;
	shipping_cost: number /* float64 */;
	total_weight: number /* float64 */;
	customer_details: CustomerDetailsDTO;
	currency: string;
	discount_code?: string;
	discount_amount: number /* float64 */;
	final_amount: number /* float64 */;
	applied_discount?: AppliedDiscountDTO;
	created_at: string;
	updated_at: string;
	last_activity_at: string;
	expires_at: string;
	completed_at?: string;
	converted_order_id?: number /* uint */;
}
/**
 * CheckoutItemDTO represents an item in a checkout
 */
export interface CheckoutItemDTO {
	id: number /* uint */;
	product_id: number /* uint */;
	variant_id?: number /* uint */;
	product_name: string;
	variant_name?: string;
	image_url: string;
	sku: string;
	price: number /* float64 */;
	quantity: number /* int */;
	weight: number /* float64 */;
	subtotal: number /* float64 */;
	created_at: string;
	updated_at: string;
}
/**
 * AddToCheckoutRequest represents the data needed to add an item to a checkout
 */
export interface AddToCheckoutRequest {
	sku: string;
	quantity: number /* int */;
}
/**
 * UpdateCheckoutItemRequest represents the data needed to update a checkout item
 */
export interface UpdateCheckoutItemRequest {
	quantity: number /* int */;
}
/**
 * SetShippingAddressRequest represents the data needed to set a shipping address
 */
export interface SetShippingAddressRequest {
	address_line1: string;
	address_line2: string;
	city: string;
	state: string;
	postal_code: string;
	country: string;
}
/**
 * SetBillingAddressRequest represents the data needed to set a billing address
 */
export interface SetBillingAddressRequest {
	address_line1: string;
	address_line2: string;
	city: string;
	state: string;
	postal_code: string;
	country: string;
}
/**
 * SetCustomerDetailsRequest represents the data needed to set customer details
 */
export interface SetCustomerDetailsRequest {
	email: string;
	phone: string;
	full_name: string;
}
/**
 * SetShippingMethodRequest represents the data needed to set a shipping method
 */
export interface SetShippingMethodRequest {
	shipping_method_id: number /* uint */;
}
/**
 * SetCurrencyRequest represents the data needed to change checkout currency
 */
export interface SetCurrencyRequest {
	currency: string;
}
/**
 * ApplyDiscountRequest represents the data needed to apply a discount
 */
export interface ApplyDiscountRequest {
	discount_code: string;
}
/**
 * CheckoutListResponse represents a paginated list of checkouts
 */
export interface CheckoutListResponse {
	ListResponseDTO: ListResponseDTO<CheckoutDTO>;
}
/**
 * CheckoutSearchRequest represents the parameters for searching checkouts
 */
export interface CheckoutSearchRequest {
	user_id?: number /* uint */;
	status?: string;
	PaginationDTO: PaginationDTO;
}
export interface CheckoutCompleteResponse {
	order: OrderSummaryDTO;
	action_required?: boolean;
	redirect_url?: string;
}
/**
 * CompleteCheckoutRequest represents the data needed to convert a checkout to an order
 */
export interface CompleteCheckoutRequest {
	payment_provider: string;
	payment_data: PaymentData;
}
export interface PaymentData {
	card_details?: CardDetailsDTO;
	phone_number?: string;
}
/**
 * CardDetailsDTO represents card details for payment processing
 */
export interface CardDetailsDTO {
	card_number: string;
	expiry_month: number /* int */;
	expiry_year: number /* int */;
	cvv: string;
	cardholder_name: string;
	token?: string; // Optional token for saved cards
}

//////////
// source: common.go

/**
 * PaginationDTO represents pagination parameters
 */
export interface PaginationDTO {
	page: number /* int */;
	page_size: number /* int */;
	total: number /* int */;
}
/**
 * ResponseDTO is a generic response wrapper
 */
export interface ResponseDTO<T extends any> {
	success: boolean;
	message?: string;
	data?: T;
	error?: string;
}
/**
 * ListResponseDTO is a generic list response wrapper
 */
export interface ListResponseDTO<T extends any> {
	success: boolean;
	message?: string;
	data?: T[];
	pagination?: PaginationDTO;
	error?: string;
}
/**
 * AddressDTO represents a shipping or billing address
 */
export interface AddressDTO {
	address_line1: string;
	address_line2: string;
	city: string;
	state: string;
	postal_code: string;
	country: string;
}
/**
 * CustomerDetailsDTO represents customer information for a checkout
 */
export interface CustomerDetailsDTO {
	email: string;
	phone: string;
	full_name: string;
}

//////////
// source: currency.go

/**
 * CurrencyDTO represents a currency entity
 */
export interface CurrencyDTO {
	code: string;
	name: string;
	symbol: string;
	exchange_rate: number /* float64 */;
	is_enabled: boolean;
	is_default: boolean;
	created_at: string;
	updated_at: string;
}
/**
 * CurrencySummaryDTO represents a simplified currency view
 */
export interface CurrencySummaryDTO {
	code: string;
	name: string;
	symbol: string;
	exchange_rate: number /* float64 */;
	is_default: boolean;
}
/**
 * CreateCurrencyRequest represents a request to create a new currency
 */
export interface CreateCurrencyRequest {
	code: string;
	name: string;
	symbol: string;
	exchange_rate: number /* float64 */;
	is_enabled: boolean;
	is_default?: boolean;
}
/**
 * UpdateCurrencyRequest represents a request to update an existing currency
 */
export interface UpdateCurrencyRequest {
	name?: string;
	symbol?: string;
	exchange_rate?: number /* float64 */;
	is_enabled?: boolean;
	is_default?: boolean;
}
/**
 * ConvertAmountRequest represents a request to convert an amount between currencies
 */
export interface ConvertAmountRequest {
	amount: number /* float64 */;
	from_currency: string;
	to_currency: string;
}
/**
 * SetDefaultCurrencyRequest represents a request to set a currency as default
 */
export interface SetDefaultCurrencyRequest {
	code: string;
}
/**
 * ConvertAmountResponse represents the response for currency conversion
 */
export interface ConvertAmountResponse {
	from: ConvertedAmountDTO;
	to: ConvertedAmountDTO;
}
/**
 * ConvertedAmountDTO represents an amount in a specific currency
 */
export interface ConvertedAmountDTO {
	currency: string;
	amount: number /* float64 */;
	cents: number /* int64 */;
}
/**
 * DeleteCurrencyResponse represents the response after deleting a currency
 */
export interface DeleteCurrencyResponse {
	status: string;
	message: string;
}

//////////
// source: discount.go

/**
 * DiscountDTO represents a discount in the system
 */
export interface DiscountDTO {
	id: number /* uint */;
	code: string;
	type: string;
	method: string;
	value: number /* float64 */;
	min_order_value: number /* float64 */;
	max_discount_value: number /* float64 */;
	product_ids?: number /* uint */[];
	category_ids?: number /* uint */[];
	start_date: string;
	end_date: string;
	usage_limit: number /* int */;
	current_usage: number /* int */;
	active: boolean;
	created_at: string;
	updated_at: string;
}
/**
 * AppliedDiscountDTO represents an applied discount in a checkout
 */
export interface AppliedDiscountDTO {
	id: number /* uint */;
	code: string;
	type: string;
	method: string;
	value: number /* float64 */;
	amount: number /* float64 */;
}
/**
 * CreateDiscountRequest represents the data needed to create a new discount
 */
export interface CreateDiscountRequest {
	code: string;
	type: string;
	method: string;
	value: number /* float64 */;
	min_order_value: number /* float64 */;
	max_discount_value: number /* float64 */;
	product_ids?: number /* uint */[];
	category_ids?: number /* uint */[];
	start_date: string;
	end_date: string;
	usage_limit: number /* int */;
}
/**
 * UpdateDiscountRequest represents the data needed to update a discount
 */
export interface UpdateDiscountRequest {
	code?: string;
	type?: string;
	method?: string;
	value?: number /* float64 */;
	min_order_value?: number /* float64 */;
	max_discount_value?: number /* float64 */;
	product_ids?: number /* uint */[];
	category_ids?: number /* uint */[];
	start_date: string;
	end_date: string;
	usage_limit?: number /* int */;
	active: boolean;
}
/**
 * ValidateDiscountRequest represents the data needed to validate a discount code
 */
export interface ValidateDiscountRequest {
	discount_code: string;
}
/**
 * ValidateDiscountResponse represents the response for discount validation
 */
export interface ValidateDiscountResponse {
	valid: boolean;
	reason?: string;
	discount_id?: number /* uint */;
	code?: string;
	type?: string;
	method?: string;
	value?: number /* float64 */;
	min_order_value?: number /* float64 */;
	max_discount_value?: number /* float64 */;
}

//////////
// source: order.go

/**
 * OrderDTO represents an order in the system
 */
export interface OrderDTO {
	id: number /* uint */;
	user_id: number /* uint */;
	order_number: string;
	items: OrderItemDTO[];
	status: OrderStatus;
	total_amount: number /* float64 */;
	final_amount: number /* float64 */;
	currency: string;
	shipping_address: AddressDTO;
	billing_address: AddressDTO;
	payment_details: PaymentDetails;
	shipping_details: ShippingOptionDTO;
	discount_details: AppliedDiscountDTO;
	customer: CustomerDetailsDTO;
	checkout_id?: string;
	created_at: string;
	updated_at: string;
}
export interface OrderSummaryDTO {
	id: number /* uint */;
	order_number: string;
	user_id: number /* uint */;
	status: OrderStatus;
	total_amount: number /* float64 */;
	final_amount: number /* float64 */;
	order_lines_amount: number /* int */;
	currency: string;
	created_at: string;
	updated_at: string;
}
export interface PaymentDetails {
	payment_id: string;
	provider: PaymentProvider;
	method: PaymentMethod;
	status: string;
	captured: boolean;
	refunded: boolean;
}
/**
 * OrderItemDTO represents an item in an order
 */
export interface OrderItemDTO {
	id: number /* uint */;
	order_id: number /* uint */;
	product_id: number /* uint */;
	variant_id?: number /* uint */;
	sku: string;
	product_name: string;
	variant_name: string;
	quantity: number /* int */;
	unit_price: number /* float64 */;
	total_price: number /* float64 */;
	created_at: string;
	updated_at: string;
}
/**
 * CreateOrderRequest represents the data needed to create a new order
 */
export interface CreateOrderRequest {
	first_name: string;
	last_name: string;
	email: string;
	phone_number?: string;
	shipping_address: AddressDTO;
	billing_address: AddressDTO;
	shipping_method_id: number /* uint */;
}
/**
 * CreateOrderItemRequest represents the data needed to create a new order item
 */
export interface CreateOrderItemRequest {
	product_id: number /* uint */;
	variant_id?: number /* uint */;
	quantity: number /* int */;
}
/**
 * UpdateOrderRequest represents the data needed to update an existing order
 */
export interface UpdateOrderRequest {
	status?: string;
	payment_status?: string;
	tracking_number?: string;
	estimated_delivery?: string;
}
/**
 * OrderSearchRequest represents the parameters for searching orders
 */
export interface OrderSearchRequest {
	user_id?: number /* uint */;
	status?: OrderStatus;
	payment_status?: string;
	start_date?: string;
	end_date?: string;
	pagination: PaginationDTO;
}
/**
 * ProcessPaymentRequest represents the data needed to process a payment
 */
export interface ProcessPaymentRequest {
	payment_method: PaymentMethod;
	payment_provider: PaymentProvider;
	card_details?: any /* service.CardDetails */;
	phone_number?: string;
}
/**
 * OrderStatus represents the status of an order
 */
export type OrderStatus = string;
export const OrderStatusPending: OrderStatus = 'pending';
export const OrderStatusPendingAction: OrderStatus = 'pending_action'; // Requires user action (e.g., redirect to payment provider)
export const OrderStatusPaid: OrderStatus = 'paid';
export const OrderStatusCaptured: OrderStatus = 'captured'; // Payment captured
export const OrderStatusShipped: OrderStatus = 'shipped';
export const OrderStatusDelivered: OrderStatus = 'delivered';
export const OrderStatusCancelled: OrderStatus = 'cancelled';
export const OrderStatusRefunded: OrderStatus = 'refunded';
/**
 * PaymentMethod represents the payment method used for an order
 */
export type PaymentMethod = string;
export const PaymentMethodCard: PaymentMethod = 'credit_card';
export const PaymentMethodWallet: PaymentMethod = 'wallet';
/**
 * PaymentProvider represents the payment provider used for an order
 */
export type PaymentProvider = string;
export const PaymentProviderStripe: PaymentProvider = 'stripe';
export const PaymentProviderMobilePay: PaymentProvider = 'mobilepay';

//////////
// source: product.go

/**
 * ProductDTO represents a product in the system
 */
export interface ProductDTO {
	id: number /* uint */;
	name: string;
	description: string;
	sku: string;
	price: number /* float64 */;
	currency: string;
	stock: number /* int */;
	weight: number /* float64 */;
	category_id: number /* uint */;
	created_at: string;
	updated_at: string;
	images: string[];
	has_variants: boolean;
	variants?: VariantDTO[];
	active: boolean;
}
/**
 * VariantDTO represents a product variant
 */
export interface VariantDTO {
	id: number /* uint */;
	product_id: number /* uint */;
	sku: string;
	price: number /* float64 */;
	currency: string;
	stock: number /* int */;
	attributes: VariantAttributeDTO[];
	images?: string[];
	is_default: boolean;
	created_at: string;
	updated_at: string;
}
export interface VariantAttributeDTO {
	name: string;
	value: string;
}
/**
 * CreateProductRequest represents the data needed to create a new product
 */
export interface CreateProductRequest {
	name: string;
	description: string;
	currency: string;
	category_id: number /* uint */;
	images: string[];
	active: boolean;
	variants?: CreateVariantRequest[];
}
/**
 * CreateVariantRequest represents the data needed to create a new product variant
 */
export interface CreateVariantRequest {
	sku: string;
	price: number /* float64 */;
	stock: number /* int */;
	attributes: VariantAttributeDTO[];
	images?: string[];
	is_default?: boolean;
}
/**
 * UpdateProductRequest represents the data needed to update an existing product
 */
export interface UpdateProductRequest {
	name?: string;
	description?: string;
	currency?: string;
	category_id?: number /* uint */;
	images?: string[];
	active?: boolean;
}
/**
 * UpdateVariantRequest represents the data needed to update an existing product variant
 */
export interface UpdateVariantRequest {
	sku?: string;
	price?: number /* float64 */;
	stock?: number /* int */;
	attributes?: VariantAttributeDTO[];
	images?: string[];
	is_default?: boolean;
}
/**
 * ProductListResponse represents a paginated list of products
 */
export interface ProductListResponse {
	ListResponseDTO: ListResponseDTO<ProductDTO>;
}

//////////
// source: shipping.go

/**
 * ShippingMethodDetailDTO represents a shipping method in the system with full details
 */
export interface ShippingMethodDetailDTO {
	id: number /* uint */;
	name: string;
	description: string;
	estimated_delivery_days: number /* int */;
	active: boolean;
	created_at: string;
	updated_at: string;
}
/**
 * CreateShippingMethodRequest represents the data needed to create a new shipping method
 */
export interface CreateShippingMethodRequest {
	name: string;
	description: string;
	estimated_delivery_days: number /* int */;
}
/**
 * UpdateShippingMethodRequest represents the data needed to update a shipping method
 */
export interface UpdateShippingMethodRequest {
	name?: string;
	description?: string;
	estimated_delivery_days?: number /* int */;
	active: boolean;
}
/**
 * ShippingZoneDTO represents a shipping zone in the system
 */
export interface ShippingZoneDTO {
	id: number /* uint */;
	name: string;
	description: string;
	countries: string[];
	states: string[];
	zip_codes: string[];
	active: boolean;
	created_at: string;
	updated_at: string;
}
/**
 * CreateShippingZoneRequest represents the data needed to create a new shipping zone
 */
export interface CreateShippingZoneRequest {
	name: string;
	description: string;
	countries: string[];
	states: string[];
	zip_codes: string[];
}
/**
 * UpdateShippingZoneRequest represents the data needed to update a shipping zone
 */
export interface UpdateShippingZoneRequest {
	name?: string;
	description?: string;
	countries?: string[];
	states?: string[];
	zip_codes?: string[];
	active: boolean;
}
/**
 * ShippingRateDTO represents a shipping rate in the system
 */
export interface ShippingRateDTO {
	id: number /* uint */;
	shipping_method_id: number /* uint */;
	shipping_method?: ShippingMethodDetailDTO;
	shipping_zone_id: number /* uint */;
	shipping_zone?: ShippingZoneDTO;
	base_rate: number /* float64 */;
	min_order_value: number /* float64 */;
	free_shipping_threshold?: number /* float64 */;
	weight_based_rates?: WeightBasedRateDTO[];
	value_based_rates?: ValueBasedRateDTO[];
	active: boolean;
	created_at: string;
	updated_at: string;
}
/**
 * CreateShippingRateRequest represents the data needed to create a new shipping rate
 */
export interface CreateShippingRateRequest {
	shipping_method_id: number /* uint */;
	shipping_zone_id: number /* uint */;
	base_rate: number /* float64 */;
	min_order_value: number /* float64 */;
	free_shipping_threshold?: number /* float64 */;
	active: boolean;
}
/**
 * UpdateShippingRateRequest represents the data needed to update a shipping rate
 */
export interface UpdateShippingRateRequest {
	base_rate?: number /* float64 */;
	min_order_value?: number /* float64 */;
	free_shipping_threshold?: number /* float64 */;
	active: boolean;
}
/**
 * WeightBasedRateDTO represents a weight-based rate in the system
 */
export interface WeightBasedRateDTO {
	id: number /* uint */;
	shipping_rate_id: number /* uint */;
	min_weight: number /* float64 */;
	max_weight: number /* float64 */;
	rate: number /* float64 */;
	created_at: string;
	updated_at: string;
}
/**
 * CreateWeightBasedRateRequest represents the data needed to create a weight-based rate
 */
export interface CreateWeightBasedRateRequest {
	shipping_rate_id: number /* uint */;
	min_weight: number /* float64 */;
	max_weight: number /* float64 */;
	rate: number /* float64 */;
}
/**
 * ValueBasedRateDTO represents a value-based rate in the system
 */
export interface ValueBasedRateDTO {
	id: number /* uint */;
	shipping_rate_id: number /* uint */;
	min_order_value: number /* float64 */;
	max_order_value: number /* float64 */;
	rate: number /* float64 */;
	created_at: string;
	updated_at: string;
}
/**
 * CreateValueBasedRateRequest represents the data needed to create a value-based rate
 */
export interface CreateValueBasedRateRequest {
	shipping_rate_id: number /* uint */;
	min_order_value: number /* float64 */;
	max_order_value: number /* float64 */;
	rate: number /* float64 */;
}
/**
 * ShippingOptionDTO represents a shipping option with calculated cost
 */
export interface ShippingOptionDTO {
	shipping_rate_id: number /* uint */;
	shipping_method_id: number /* uint */;
	name: string;
	description: string;
	estimated_delivery_days: number /* int */;
	cost: number /* float64 */;
	free_shipping: boolean;
}
/**
 * CalculateShippingOptionsRequest represents the request to calculate shipping options
 */
export interface CalculateShippingOptionsRequest {
	address: AddressDTO;
	order_value: number /* float64 */;
	order_weight: number /* float64 */;
}
/**
 * CalculateShippingOptionsResponse represents the response with available shipping options
 */
export interface CalculateShippingOptionsResponse {
	options: ShippingOptionDTO[];
}
/**
 * CalculateShippingCostRequest represents the request to calculate shipping cost for a specific rate
 */
export interface CalculateShippingCostRequest {
	order_value: number /* float64 */;
	order_weight: number /* float64 */;
}
/**
 * CalculateShippingCostResponse represents the response with calculated shipping cost
 */
export interface CalculateShippingCostResponse {
	cost: number /* float64 */;
}

//////////
// source: user.go

/**
 * UserDTO represents a user in the system
 */
export interface UserDTO {
	id: number /* uint */;
	email: string;
	first_name: string;
	last_name: string;
	role: string;
	created_at: string;
	updated_at: string;
}
/**
 * CreateUserRequest represents the data needed to create a new user
 */
export interface CreateUserRequest {
	email: string;
	password: string;
	first_name: string;
	last_name: string;
}
/**
 * UpdateUserRequest represents the data needed to update an existing user
 */
export interface UpdateUserRequest {
	first_name?: string;
	last_name?: string;
}
/**
 * UserLoginRequest represents the data needed for user login
 */
export interface UserLoginRequest {
	email: string;
	password: string;
}
/**
 * UserLoginResponse represents the response after successful login
 */
export interface UserLoginResponse {
	user: UserDTO;
	access_token: string;
	refresh_token: string;
	expires_in: number /* int64 */;
}
/**
 * UserListResponse represents a paginated list of users
 */
export interface UserListResponse {
	ListResponseDTO: ListResponseDTO<UserDTO>;
}
/**
 * ChangePasswordRequest represents the data needed to change a user's password
 */
export interface ChangePasswordRequest {
	current_password: string;
	new_password: string;
}
